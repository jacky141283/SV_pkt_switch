`ifndef GUARD_ENV
`define GUARD_ENV

`include "scoreboard.sv"
`include "driver.sv"
`include "receiver.sv"

class Environment;
  virtual mem_interface.MEM mem_intf; //virtual interface & modport
  virtual input_interface.IP input_intf; 
  virtual output_interface.OP output_intf[4];
  
  Driver drvr;
  mailbox drvr2sb;
  Receiver rcvr[4];
  mailbox rcvr2sb;
  Scoreboard sb;
  
  function new(virtual mem_interface.MEM mem_intf,
               virtual input_interface.IP input_intf,
               virtual output_interface.OP output_intf[4]);
    
    this.mem_intf=mem_intf;
	this.input_intf=input_intf;    
    this.output_intf=output_intf;
    
    $display(" %0d : Environemnt : created env object",$time);
  endfunction;
  
  task run();
    $display("%0d: Environment:start of rum()",$time);
    build(); //construct components like driver and monitor
    reset(); //reset DUT    	
    cfg_dut(); //configure DUT output port address
    start(); //call methods declared in driver and monitor
    wait_for_end(); //used to wait until the end of the simulation
    report(); //Show test result pass or fail.
    $display("%0d: Environment:end of rum()",$time);
  endtask:run
  
  function void build();
    $display("%0d:start of build method",$time);
    drvr2sb=new();
    rcvr2sb=new();
    sb=new(drvr2sb,rcvr2sb);
    
    drvr=new(input_intf,drvr2sb);        
    foreach (rcvr[i])
      rcvr[i]=new(output_intf[i],rcvr2sb);
    $display("%0d:end of build method",$time);    
  endfunction:build
  
  task reset();
    //reset signals
    input_intf.cb.data_in<=0;  
    input_intf.cb.data_status<=0;
    mem_intf.cb.mem_add<=0;
    mem_intf.cb.mem_en<=0;
    mem_intf.cb.mem_rd_wr<=0;
    mem_intf.cb.mem_data<=0;
    foreach(output_intf[i])
      output_intf[i].cb.read<=0;
    
    //assert reset for 4 cycles
    input_intf.reset<=1;
    repeat(4) @ (posedge input_intf.clock);    
    input_intf.reset<=0;
  endtask:reset
  
  task cfg_dut(); 
    //We could omit begin-end block in task. Statement are still sequential.
    $display("%0d : Environment : start of cfg_dut() method",$time);
    
    mem_intf.cb.mem_en <=1;
    @ (posedge mem_intf.clock); //it is null statement, becareful the semicolon position. It will block next statement until the event is triggered.
    mem_intf.cb.mem_rd_wr <=1;
    
    @ (posedge mem_intf.clock);
    mem_intf.cb.mem_add <=8'h0;
    mem_intf.cb.mem_data <=`P0;
    $display("time %0d :Environment part 0 address %h",$time,`P0);
    
    @ (posedge mem_intf.clock);
    mem_intf.cb.mem_add <=8'h1;
    mem_intf.cb.mem_data <=`P1;
    $display("time %0d :Environment part 1 address %h",$time,`P1);
    
    @ (posedge mem_intf.clock);
    mem_intf.cb.mem_add <=8'h2;
    mem_intf.cb.mem_data <=`P2;
    $display("time %0d :Environment part 2 address %h",$time,`P2);
    
    @ (posedge mem_intf.clock);
    mem_intf.cb.mem_add <=8'h3;
    mem_intf.cb.mem_data <=`P3;
    $display("time %0d :Environment part 3 address %h",$time,`P3);
    
    @ (posedge mem_intf.clock);
    mem_intf.cb.mem_add <=0;
    mem_intf.cb.mem_data <=0;
    mem_intf.cb.mem_en <=0;
    mem_intf.cb.mem_rd_wr <=0;
	
    $display("0%d: Environment : start of cfg_dut() method",$time);             
  endtask:cfg_dut
  
  task start();
    $display("%0d:env:Start of start() method",$time);
    fork
      drvr.start();
      rcvr[0].start();
      rcvr[1].start();
      rcvr[2].start();      
      rcvr[3].start();
      sb.start();
    join_any
    $display("%0d:env:end of start() method",$time);
  endtask:start
  
  task wait_for_end();
    $display("0%d: Environment : start of wait_for_end() method",$time);
    repeat(1000) @ (posedge input_intf.clock);
    $display("0%d: Environment : end of wait_for_end() method",$time);    
  endtask:wait_for_end

  task report();
    if (error==0)
      $display("%0d:*****TEST PASS*****",$time);    
    else
      $display("%0d:*****TEST FAIL with %0d ERRORS*****",$time,error);
  endtask 

endclass
`endif